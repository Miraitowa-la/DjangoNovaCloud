# Generated by Django 5.2.1 on 2025-05-17 15:04

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('iot_devices', '0005_remove_modbus_fields'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Strategy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='策略名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='策略描述')),
                ('is_enabled', models.BooleanField(default=True, verbose_name='是否启用')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='strategies', to='iot_devices.project', verbose_name='所属项目')),
                ('trigger_source_device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trigger_strategies', to='iot_devices.device', verbose_name='触发设备')),
            ],
            options={
                'verbose_name': '策略',
                'verbose_name_plural': '策略',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_key', models.CharField(default='value', help_text='通常为"value"', max_length=50, verbose_name='指标键名')),
                ('operator', models.CharField(choices=[('>', '大于'), ('<', '小于'), ('>=', '大于等于'), ('<=', '小于等于'), ('==', '等于'), ('!=', '不等于')], max_length=2, verbose_name='比较运算符')),
                ('threshold_value_type', models.CharField(choices=[('float', '数值'), ('string', '文本'), ('boolean', '布尔值')], default='float', max_length=10, verbose_name='阈值类型')),
                ('threshold_value_float', models.FloatField(blank=True, null=True, verbose_name='数值阈值')),
                ('threshold_value_string', models.CharField(blank=True, max_length=100, null=True, verbose_name='文本阈值')),
                ('threshold_value_boolean', models.BooleanField(blank=True, null=True, verbose_name='布尔阈值')),
                ('logical_operator_to_next', models.CharField(blank=True, choices=[('AND', '与'), ('OR', '或')], max_length=3, null=True, verbose_name='与下一条件的逻辑关系')),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conditions', to='iot_devices.sensor', verbose_name='传感器')),
                ('strategy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conditions', to='strategy_engine.strategy', verbose_name='所属策略')),
            ],
            options={
                'verbose_name': '条件',
                'verbose_name_plural': '条件',
            },
        ),
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('send_email_notification', '发送邮件通知'), ('control_actuator', '控制执行器'), ('webhook', 'WebHook调用')], max_length=50, verbose_name='动作类型')),
                ('recipient_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='接收邮箱')),
                ('notification_subject_template', models.CharField(blank=True, max_length=200, null=True, verbose_name='通知主题模板')),
                ('notification_body_template', models.TextField(blank=True, help_text='可使用占位符如 {{device.name}}, {{sensor.name}}, {{value}}', null=True, verbose_name='通知内容模板')),
                ('actuator_command', models.CharField(blank=True, help_text='简单命令如"ON"/"OFF"，或复杂命令的JSON字符串', max_length=50, null=True, verbose_name='执行器命令')),
                ('webhook_url', models.URLField(blank=True, null=True, verbose_name='WebHook URL')),
                ('webhook_method', models.CharField(blank=True, default='POST', max_length=10, null=True, verbose_name='HTTP方法')),
                ('webhook_payload_template', models.TextField(blank=True, help_text='JSON模板，可包含占位符', null=True, verbose_name='WebHook负载模板')),
                ('recipient_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='接收用户')),
                ('target_actuator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='iot_devices.actuator', verbose_name='目标执行器')),
                ('strategy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='strategy_engine.strategy', verbose_name='所属策略')),
            ],
            options={
                'verbose_name': '动作',
                'verbose_name_plural': '动作',
            },
        ),
        migrations.CreateModel(
            name='StrategyLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='记录时间')),
                ('result', models.BooleanField(default=True, verbose_name='执行结果')),
                ('message', models.TextField(blank=True, null=True, verbose_name='日志信息')),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='strategy_engine.action', verbose_name='执行动作')),
                ('sensor_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='strategy_logs', to='iot_devices.sensordata', verbose_name='触发数据')),
                ('strategy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='strategy_engine.strategy', verbose_name='策略')),
            ],
            options={
                'verbose_name': '策略日志',
                'verbose_name_plural': '策略日志',
                'ordering': ['-timestamp'],
            },
        ),
    ]
