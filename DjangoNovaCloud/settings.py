"""
Django settings for DjangoNovaCloud project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-9rbxqc6+@h8f0u9h%@!hp&b7209n^&)t6bq2mjrnjfdhk*=v_@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # 第三方应用
    'rest_framework',
    'channels',
    
    # 自定义应用
    'accounts',
    'core',
    'iot_devices',
    'mqtt_client',
    'tcp_server',
    'strategy_engine',
    'admin_panel',  # 新添加的管理员面板应用
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'DjangoNovaCloud.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'DjangoNovaCloud.wsgi.application'
ASGI_APPLICATION = 'DjangoNovaCloud.asgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        'OPTIONS': {
            'user_attributes': ['username', 'email'],
            'max_similarity': 0.7,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 10,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / 'static']

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 用户认证相关配置
LOGIN_URL = 'accounts:login'
LOGIN_REDIRECT_URL = 'core:index'
LOGOUT_REDIRECT_URL = 'accounts:login'

# REST Framework配置
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20
}

# MQTT配置
# 使用公共MQTT服务器进行测试
MQTT_CONFIG = {
    'BROKER_HOST': 'broker.emqx.io',  # 公共MQTT服务器
    'BROKER_PORT': 1883,              # 非TLS端口
    'BROKER_PORT_TLS': 8883,          # TLS端口
    'USE_TLS': False,                 # 初期测试暂不使用TLS
    'KEEPALIVE': 60,                  # 保持连接时间（秒）
    'CLIENT_ID_PREFIX': 'novacloud_server_',  # 客户端ID前缀，后面会加上随机字符串
    'CLEAN_SESSION': True,
    'QOS': 1,                         # 消息质量（0: 最多一次，1: 至少一次，2: 只有一次）
    
    # MQTT主题配置
    'TOPIC_PREFIX': 'novacloud/',     # 所有主题的前缀
    'DEVICE_DATA_TOPIC': 'devices/{device_id}/data',  # 设备数据上报主题模板
    'DEVICE_STATUS_TOPIC': 'devices/{device_id}/status',  # 设备状态主题模板
    'DEVICE_COMMAND_TOPIC': 'devices/{device_id}/command',  # 向设备发送命令的主题模板
    'DEVICE_CONFIG_TOPIC': 'devices/{device_id}/config',  # 设备配置主题模板
}

# 是否在Django启动时自动连接MQTT
MQTT_AUTO_CONNECT = True

# TCP服务器配置
TCP_SERVER_CONFIG = {
    'HOST': '0.0.0.0',       # 监听所有接口
    'PORT': 9000,            # TCP服务端口
    'BUFFER_SIZE': 1024,     # 接收缓冲区大小
    'FRAME_DELIMITER': b'\n',  # 帧分隔符（这里使用换行符作为消息分隔）
    'MAX_MESSAGE_SIZE': 131072,  # 最大消息大小（128KB）
    'CONNECTION_TIMEOUT': 300,  # 连接超时时间（秒）
}

# Channels配置
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}

# 会话安全设置
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_AGE = 12 * 60 * 60  # 12小时

# 生产环境HTTPS设置
if not DEBUG:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_HSTS_SECONDS = 31536000  # 一年
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# 点击劫持保护
X_FRAME_OPTIONS = 'DENY'
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True

# 安全日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'debug': {
            'format': '{levelname} {asctime} {module} {pathname} {lineno} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 改用RotatingFileHandler
            'filename': os.path.join(BASE_DIR, 'logs/django.log'),
            'formatter': 'verbose',
            'encoding': 'utf-8',
            'maxBytes': 10 * 1024 * 1024,  # 10 MB
            'backupCount': 5,
        },
        'security': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 改用RotatingFileHandler
            'filename': os.path.join(BASE_DIR, 'logs/security.log'),
            'formatter': 'verbose',
            'encoding': 'utf-8',
            'maxBytes': 10 * 1024 * 1024,  # 10 MB
            'backupCount': 5,
        },
        'debug_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',  # 改用RotatingFileHandler
            'filename': os.path.join(BASE_DIR, 'logs/debug.log'),
            'formatter': 'debug',
            'encoding': 'utf-8',
            'maxBytes': 10 * 1024 * 1024,  # 10 MB
            'backupCount': 5,
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'debug',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.security': {
            'handlers': ['security', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'app.security': {  # 自定义安全日志
            'handlers': ['security', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'accounts': {  # 用户认证相关日志
            'handlers': ['file', 'security', 'debug_file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'iot_devices': {  # 设备操作相关日志
            'handlers': ['file', 'security', 'debug_file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'mqtt_client': {  # MQTT通信相关日志
            'handlers': ['file', 'security', 'debug_file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'strategy_engine': {  # 策略执行相关日志
            'handlers': ['file', 'security', 'debug_file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'debug': {  # 调试日志
            'handlers': ['debug_file', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}
